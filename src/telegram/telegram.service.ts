import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { prisma } from 'prisma/prisma.service';
import { handleAdminMessage } from 'src/lib/admin.handler';
import { banlistCommand } from 'src/lib/commands/banlist.command';
import { clearCommand } from 'src/lib/commands/clear.command';
import { helpCommand } from 'src/lib/commands/help.command';
import { handleUserMessage } from 'src/lib/user.handler';
import { Markup, Telegraf } from 'telegraf';

@Injectable()
export class TelegramService implements OnModuleInit {
  private bot: Telegraf;

  constructor(private readonly configService: ConfigService) {
    const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    if (!token) throw new Error('TOKEN is missing');
    this.bot = new Telegraf(token);
  }

  adminKeyBoard = Markup.keyboard([
    ['üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–∫—É (/rm)'],
    ['‚ÑπÔ∏è –ü–æ–º–æ—â—å (/help)', 'üö´ Banlist (/banlist)'],
  ]).resize();

  onModuleInit() {
    const adminId = this.configService.get<string>('ADMIN_CHAT_ID');
    if (!adminId) return;

    this.bot.start((ctx) => {
      if (ctx.from.id.toString() === adminId) {
        ctx.reply(
          '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–∏–∂–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!',
          this.adminKeyBoard,
        );
      } else {
        ctx.reply(
          '–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –∫–∞–∫—É—é-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
        );
      }
    });

    this.bot.hears('üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–∫—É (/rm)', clearCommand);
    this.bot.command('rm', clearCommand);

    this.bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å (/help)', helpCommand);
    this.bot.command('help', helpCommand);
    
    this.bot.hears('üö´ Banlist (/banlist)', banlistCommand);
    this.bot.command('banlist', banlistCommand);

    this.bot.on('text', async (ctx) => {
      const userId = String(ctx.from.id);

      const isBanned = await prisma.bannedUser.findUnique({
        where: { userId },
      });
      if (isBanned) {
        await ctx.reply('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.');
        return;
      }

      if (ctx.from.id.toString() === adminId) {
        if ('reply_to_message' in ctx.message && ctx.message.reply_to_message) {
          const repliedMessage = ctx.message.reply_to_message;
          const originalMessageId = repliedMessage.message_id;
          const chatId = repliedMessage.chat.id;

          const suggestion = await prisma.suggestion.findFirst({
            where: {
              messageId: originalMessageId,
              chatId: chatId.toString(),
            },
          });

          if (suggestion) {
            await ctx.telegram.sendMessage(suggestion.userId, ctx.message.text);
            await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
          } else {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.');
          }
          return;
        }
        handleAdminMessage(ctx);
      } else {
        handleUserMessage(ctx, adminId);
      }
    });

    this.bot.on('callback_query', async (ctx) => {
      handleAdminMessage(ctx);
    });

    this.bot.launch();
    console.log('Bot start');
  }
}
